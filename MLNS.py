import numpy as np
from ODS import ODE_Solver


class MLN(ODE_Solver):
    """
    Реализация классической  схемы Милнса. Явная реализация схемы.
    Возвращает массив решения ОДУ или системы ОДУ.
    Атрибуты класса:
    x: массив узлов точек координаты x
    u: массив решения ОДУ в точках узла x
    k: число шагов вычисления значения в узлах
    f: функция правой части ОДУ, реализованная в виде: f(u, x)
    """

    def solver_step(self, alp=None):
        u, f, k, x = self.u, self.f, self.k, self.x

        # начальная оценка решения методом Рунге-Кутта 4 порядка
        if k < 3:
            dx = x[k + 1] - x[k]
            dx2 = dx / 2.0
            K1 = dx * f(u[k], x[k])
            K2 = dx * f(u[k] + 0.5 * K1, x[k] + dx2)
            K3 = dx * f(u[k] + 0.5 * K2, x[k] + dx2)
            K4 = dx * f(u[k] + K3, x[k] + dx)
            u_new = u[k] + (1 / 6.0) * (K1 + 2 * K2 + 2 * K3 + K4)

        if k >= 3:
            dx = x[k + 1] - x[k]

            # предиктор начальной оценки решения
            alp = u[k - 3] + 4 * dx / 3 * (2 * f(u[k], x[k]) - f(u[k - 1], x[k - 1]) + 2 * f(u[k - 2], x[k - 2]))

            # уточнение оценки решения
            u_new = u[k - 1] + dx / 3 * (f(alp, x[k + 1]) + 4 * f(u[k], x[k]) + f(u[k - 1], x[k - 1]))

        return u_new