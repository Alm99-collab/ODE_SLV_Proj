from ODS import ODE_Solver


class ABM4(ODE_Solver):
    """
    Реализация классической 4-х шаговой схемы Адамса-Башфорта-Моултона. Явная реализация схемы.
    Возвращает массив решения ОДУ или системы ОДУ u_new.

    Атрибуты класса:
    x: массив узлов точек координаты x
    u: массив решения ОДУ в точках узла x
    k: число шагов вычисления значения в узлах
    f: функция правой части ОДУ, реализованная в виде: f(u, x)
    """

    def solver_step(self):
        u, f, k, x, alp = self.u, self.f, self.k, self.x, None

        # начальная оценка решения методом Рунге-Кутта 4 порядка
        if k < 3:
            dx = x[k + 1] - x[k]
            dx2 = dx / 2.0
            K1 = dx * f(u[k], x[k])
            K2 = dx * f(u[k] + 0.5 * K1, x[k] + dx2)
            K3 = dx * f(u[k] + 0.5 * K2, x[k] + dx2)
            K4 = dx * f(u[k] + K3, x[k] + dx)
            u_new = u[k] + (1 / 6.0) * (K1 + 2 * K2 + 2 * K3 + K4)

        if k >= 3:
            dx = x[k + 1] - x[k]

            # предиктор начальной оценки решения
            alp = u[k] + dx / 24 * (55 * f(u[k], x[k]) - 59 * f(u[k - 1], x[k - 1]) + 37 * f(u[k - 2], x[k - 2])
                                    - 9 * f(u[k - 3], x[k - 3]))

            # уточнение итоговой оценки решения
            u_new = u[k] + dx / 24 * (9 * f(alp, x[k + 1]) + 19 * f(u[k], x[k]) - 5 * f(u[k - 1], x[k - 1])
                                      + f(u[k - 2], x[k - 2]))
        return u_new
